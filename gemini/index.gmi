# Epicyon

=> https://epicyon.net/epicyon.tar.gz Download
=> https://epicyon.net/#install Install
=> https://gitlab.com/bashrc2/epicyon Repo
=> https://www.patreon.com/freedombone Donate

Epicyon is an AGPL licensed ActivityPub protocol compliant federated social network server suitable for hosting a small number of accounts on low power systems requiring minimal maintenance, such as single board computers. It's the ActivityPub equivalent of an email server, storing posts as human readable JSON on file, rather than in a database. It also uses only a small amount of RAM.

## An Internet of People, Not Corporate Agendas

Epicyon is written in Python with a HTML+CSS web interface and uses almost no javascript which makes display in a web browser very lightweight.

Emojis, hashtags, photos, video and audio attachments, instance and account level blocking controls, moderation functions and reports are all supported. Build the community you want and avoid the stuff you don't. No ads. No blockchains or other Silicon Valley garbage.

## Message Scopes

Define the scope of your messages to reach the right people.

## Scheduled Posts

Schedule posts to be published at some time in the future. This can be useful for reminding yourself to do things (send your future self a direct message) or for creating a series of posts promoting some event, such as a festival or wedding.

## Text Search

Want to be reminded about what you said about a topic a month ago? The search screen allows you to do full text search on your own posts. Search on other posts can be done via the use of hashtags.

## Federated Blogging

You don't need a separate blog system. Blog posts can be added and edited, and are federated as ActivityPub articles. They also have RSS version 2.0 and 3.0 feeds. People can comment on blog posts, but unlike other systems the moderation settings apply just the same as they do for any other fediverse post arriving at your server. This makes blog spam much easier to keep control over.

International and Customizable

Epicyon supports many languages. Translations and emoji can easily be added. Alter the logo, backgrounds, terms of service and style to create a unique personality for your instance. Choose from a few different themes, or make a new one.

## Calendar Events

When creating a new post you can optionally also add a date, time and place. This will show up on the calendars of your followers, and makes organizing meetups or other community events simple. You can use message scopes to set up public events or private ones. To create reminders you can send yourself a DM with an event and it will appear on only your calendar.

## Noone Left Behind

Epicyon's lack of javascript makes it much more usable in shell based web browsers such as Lynx. As new web systems are deployed we should not be leaving anyone with minority use cases behind.

## Media Timeline

Some posts contain images and some don't. The media timeline enables you to view all your pet photos in one place.

If you want your instance to be primarily about posting and interacting with media then you can also enable the media instance option.

## Genuine Sharing Economy

Barter and gift physical items or services with other people on your instance. Search for shared items which you might want or post items you no longer have a use for. Promote ride shares or available accomodation without any unnecessary companies in the middle. Pool resources between trusted friends to build solidarity and have fun.

## Promote Your Skills and Build Teams

Define a set of skills in your profile and search for other people who have the skills you need. Organize teams who can get things done!

## Bookmarks

Want to remember a particular link or reply to something later? Bookmark your favorite posts and view them on the Saves timeline.

## Hashtags

Stay informed about the topics which people that you follow are highlighting. On the search screen there is a hashtag swarm.

## No Artificial Incentives

No algorithmic timelines. No rating or ranking of people. No trending stuff. Removing the artficial cruft of social networking allows you to focus on things you actually care about, instead of what someone else thinks you should pay attention to.

## Install

You will need python version 3.7 or later.

On a Debian based system:

    sudo apt install -y tor python3-socks imagemagick python3-numpy python3-setuptools python3-crypto python3-cryptodome python3-dateutil python3-pil.imagetk python3-idna python3-requests python3-flake8 libimage-exiftool-perl certbot nginx

The following instructions install Epicyon to the /opt directory. It's not essential that it be installed there, and it could be in any other preferred directory.

Clone the repo, or if you downloaded the tarball then extract it into the /opt directory.

    cd /opt
    git clone https://gitlab.com/bashrc2/epicyon

Create a user for the server to run as:

    sudo su
    adduser --system --home=/opt/epicyon --group epicyon
    chown -R epicyon:epicyon /opt/epicyon

Create a daemon:

    nano /etc/systemd/system/epicyon.service

Paste the following:

    [Unit]
    Description=epicyon
    After=syslog.target
    After=network.target

    [Service]
    Type=simple
    User=epicyon
    Group=epicyon
    WorkingDirectory=/opt/epicyon
    ExecStart=/usr/bin/python3 /opt/epicyon/epicyon.py --port 443 --proxy 7156 --domain YOUR_DOMAIN --registration open --debug
    Environment=USER=epicyon
    Environment=PYTHONUNBUFFERED=true
    Restart=always
    StandardError=syslog
    CPUQuota=80%

    [Install]
    WantedBy=multi-user.target

Activate the daemon:

    systemctl enable epicyon
    systemctl start epicyon

Create a web server configuration:

    nano /etc/nginx/sites-available/YOUR_DOMAIN

And paste the following:

    server {
        listen 80;
        listen [::]:80;
        server_name YOUR_DOMAIN;
        access_log /dev/null;
        error_log /dev/null;
        client_max_body_size 31m;
        client_body_buffer_size 128k;

        limit_conn conn_limit_per_ip 10;
        limit_req zone=req_limit_per_ip burst=10 nodelay;

        index index.html;
        rewrite ^ https://$server_name$request_uri? permanent;
    }

    server {
        listen 443 ssl;
        server_name YOUR_DOMAIN;

        ssl_stapling off;
        ssl_stapling_verify off;
        ssl on;
        ssl_certificate /etc/letsencrypt/live/YOUR_DOMAIN/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/YOUR_DOMAIN/privkey.pem;
        #ssl_dhparam /etc/ssl/certs/YOUR_DOMAIN.dhparam;

        ssl_session_cache builtin:1000 shared:SSL:10m;
        ssl_session_timeout 60m;
        ssl_prefer_server_ciphers on;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Download-Options noopen;
        add_header X-Permitted-Cross-Domain-Policies none;

        add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";
        add_header Strict-Transport-Security max-age=15768000;

        access_log /dev/null;
        error_log /dev/null;

        index index.html;

        location / {
            proxy_http_version 1.1;
            client_max_body_size 31M;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forward-Proto http;
            proxy_set_header X-Nginx-Proxy true;
            proxy_temp_file_write_size 64k;
            proxy_connect_timeout 10080s;
            proxy_send_timeout 10080;
            proxy_read_timeout 10080;
            proxy_buffer_size 64k;
            proxy_buffers 16 32k;
            proxy_busy_buffers_size 64k;
            proxy_redirect off;
            proxy_request_buffering on;
            proxy_buffering on;
            proxy_pass http://localhost:7156;
        }
    }

Enable the site:

    ln -s /etc/nginx/sites-available/YOUR_DOMAIN /etc/nginx/sites-enabled/

Forward port 443 from your internet router to your server. If you have dynamic DNS make sure its configured. Add a TLS certificate:

    certbot certonly -n --server https://acme-v01.api.letsencrypt.org/directory --standalone -d YOUR_DOMAIN --renew-by-default --agree-tos --email YOUR_EMAIL

Restart your web server:

    systemctl restart nginx

If you are using the Caddy web server then see caddy.example.conf

Now you can navigate to your domain and register an account. The first account becomes the administrator.

## Upgrade

To subsequently upgrade:

    cd /opt/epicyon
    git pull
    chown -R epicyon:epicyon *
    systemctl restart epicyon